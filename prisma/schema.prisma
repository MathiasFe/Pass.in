// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//model => Como tem banco que usa o nome tabela ou collections, o prisma usa o model para "agradar geral"
model Event {
  id               String     @id @default(uuid()) //o @id transforma em primary key e @defaul(uuid()) para gerar um id aleatorio e automatico
  title            String
  details          String? //O ? informa que esse campo é opcional
  slug             String     @unique //Uma representação de um titulo ou informação , sem espaço e sem formatação, o unique define que ele é unico
  maximumAttendees Int?       @map("maximum_attendees")
  attendees        Attendee[]

  @@map("events") //Esse comando serve para nomear a tabela
}

//Quando usamos apenas um @, editamos a propriedade, quando usamos @@ editamos a tabela

model Attendee {
  id        Int      @id @default(autoincrement()) //Usando na maioria dos banco de dados;
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at") // indica que todo registro novo ira salvar a data atual, não precisa passar mais informações para o sistema
  eventId   String   @map("event_id")

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) // Cria um relacionamento entre o Attendee e o Event de N x 1
  checkIn CheckIn? // Inserimos a ? para informar que é um campo não obrigatorio, podendo ou não tem um checkin, já que é um relacionamento de 1x1

  @@unique([eventId, email]) //Cria uma verificação no banco de dados onde eu não posso ter o mesmo e-mail varias vezes no mesmo evento
  @@map("attendees")
}

//o onDelete informa que quando o registro do relacionamento attendee for excluido , esse checkin tbm deve ser excluido
model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId Int      @unique @map("attendee_id")
  // Tem relacionamento d e 1 X 1 com attendee

  @@map("check_ins")
}
